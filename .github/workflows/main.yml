name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump-version-and-publish:
    if: ${{ github.actor != 'github-actions[bot]' }}
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Bump version
        id: bump_version
        run: |
          bump_type=$(git log -1 --pretty=%B | grep -Eo '(major|minor|patch)' || echo "patch")
          npx tauri-version@latest $bump_type --no-git --no-lock
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

          cd src-tauri && cargo update -p gitaurora

      - name: Commit updated version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json package-lock.json src-tauri/Cargo.toml src-tauri/Cargo.lock src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git push

  publish-tauri:
    needs: bump-version-and-publish
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm install

      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  publish-to-other-repo:
    needs: publish-tauri
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Get version and pub_date for latest.json
        id: get_version_and_date
        run: |
          VERSION=$(node -p "require('./package.json').version")
          PUB_DATE=$(date --utc +'%Y-%m-%dT%H:%M:%SZ')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "PUB_DATE=$PUB_DATE" >> $GITHUB_ENV

      - name: Download release assets from source repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download app-v${{ env.VERSION }} --repo ${{ github.repository }} --dir ./assets

      - name: Checkout target repository (gitaurora-release)
        uses: actions/checkout@v4
        with:
          repository: monsieursam/gitaurora-release
          token: ${{ secrets.PAT_TOKEN }}
          path: target-repo

      - name: Copy assets to target repository and update latest.json
        run: |
          mkdir -p ./target-repo/assets
          cp ./assets/* ./target-repo/assets/

          # Update latest.json with correct URL pointing to target repo's release assets.
          TARGET_URL="https://github.com/monsieursam/gitaurora-release/releases/download/app-v${{ env.VERSION }}/gitaurora_x64.app.tar.gz"

          cat <<EOF > ./target-repo/latest.json
            {
              "version": "${{ env.VERSION }}",
              "notes": "See the assets to download this version and install.",
              "pub_date": "${{ env.PUB_DATE }}",
              "platforms": {
                "darwin-x86_64": {
                  "signature": "$(cat ./assets/*.sig)",
                  "url": "$TARGET_URL"
                }
              }
            }
            EOF

      - name: Commit and push changes to target repository
        run: |
          cd ./target-repo
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Release app-v${{ env.VERSION }}"
          git push
