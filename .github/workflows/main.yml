name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump-version-and-publish:
    if: ${{ github.actor != 'github-actions[bot]' }} # Prevent recursion
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Bump version
        id: bump_version
        run: |
          # Increment version based on commit message or default to "patch"
          bump_type=$(git log -1 --pretty=%B | grep -Eo '(major|minor|patch)' || echo "patch")
          npx tauri-version $bump_type
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Commit updated version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add *
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git push

      - name: Continue Workflow Dispatch
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'workflow_dispatch' }} # Avoid triggering on push
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main.yml',
              ref: 'main',
              headers: {
                authorization: `Bearer ${{ secrets.PAT_TOKEN }}`,
              },
            })

  publish-tauri:
    needs: bump-version-and-publish
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm install

      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tagName: app-v${{ steps.get_version.outputs.VERSION }}
          releaseName: 'App v${{ steps.get_version.outputs.VERSION }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  publish-to-other-repo:
    needs: publish-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Wait for release to be available
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while ! gh release view app-v${{ steps.get_version.outputs.VERSION }} --repo ${{ github.repository }}; do
            echo "Waiting for release to be available..."
            sleep 10
          done

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download app-v${{ steps.get_version.outputs.VERSION }} --repo ${{ github.repository }} --dir ./assets

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: monsieursam/gitaurora-release
          token: ${{ secrets.PAT_TOKEN }}
          path: target-repo

      - name: Copy assets to target repository
        run: |
          mkdir -p ./target-repo/assets
          cp -R ./assets/* ./target-repo/assets/
          cd ./target-repo
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Release app-v${{ steps.get_version.outputs.VERSION }}"
          git push

      - name: List assets
        run: |
          cd ./target-repo
          ls -R ./assets

      - name: Create release in target repository
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          cd ./target-repo
          gh release create app-v${{ steps.get_version.outputs.VERSION }} \
            --title "App v${{ steps.get_version.outputs.VERSION }}" \
            --notes "See the assets to download this version and install." \
            ./assets/*
