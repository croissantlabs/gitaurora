name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          REPO="monsieursam/gitaurora-release"
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/app-v$VERSION" | \
            jq -r .id)

          if [ "$RELEASE_ID" = "null" ]; then
            RELEASE_ID=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -d '{"tag_name": "app-v'"$VERSION"'", "name": "App v'"$VERSION"'", "body": "Release for version '"$VERSION"'", "draft": true}' \
              "https://api.github.com/repos/$REPO/releases" | \
              jq -r .id)
          fi

          for file in src-tauri/target/release/bundle/*/*.{dmg,msi,deb,AppImage}; do
            if [ -f "$file" ]; then
              asset_name=$(basename "$file")
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/$REPO/releases/$RELEASE_ID/assets?name=$asset_name"
            fi
          done

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          REPO="monsieursam/gitaurora-release"
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/app-v$VERSION" | \
            jq -r .id)

          curl -s -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
            -d '{"draft": false}' \
            "https://api.github.com/repos/$REPO/releases/$RELEASE_ID"
