name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: npm install

      - name: Get Version
        id: get_version
        run: echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT

      - name: Create Version File
        run: echo "${{ steps.get_version.outputs.VERSION }}" > version.txt

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload Version
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tauri-artifacts-${{ matrix.platform }}
          path: src-tauri/target/release/bundle

  create-release:
    needs: publish-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Download Version
        uses: actions/download-artifact@v3
        with:
          name: version

      - name: Read Version
        id: read_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Checkout gitaurora-release repository
        uses: actions/checkout@v4
        with:
          repository: monsieursam/gitaurora-release
          token: ${{ secrets.PAT_TOKEN }}

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          assets=""
          for file in artifacts/**/*; do
            if [ -f "$file" ]; then
              assets="$assets --assets $file"
            fi
          done

          gh release create v${{ steps.read_version.outputs.VERSION }} \
            --repo monsieursam/gitaurora-release \
            --title "Release v${{ steps.read_version.outputs.VERSION }}" \
            --notes "This is an automated release for version ${{ steps.read_version.outputs.VERSION }}" \
            --draft \
            $assets
